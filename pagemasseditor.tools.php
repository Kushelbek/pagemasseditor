<?php

/**
 * [BEGIN_COT_EXT]
 * Hooks=tools
 * [END_COT_EXT]
 */
/**
 * plugin pagemasseditor for Cotonti Siena
 * 
 * @package pagemasseditor
 * @version 1.0.0
 * @author esclkm
 * @copyright 
 * @license BSD
 *  */
// Generated by Cotonti developer tool (littledev.ru)
defined('COT_CODE') or die('Wrong URL.');

require_once cot_incfile('pagemasseditor', 'plug');
if ($cfg['maxrowsperpage'] > 50)
{
	$cfg['maxrowsperpage'] = 50;
}
$id = cot_import('id', 'R', 'INT');
$c = cot_import_request('c', 'TXT');
$in = cot_import_request('in', 'BOL');
list($pg, $d, $durl) = cot_import_pagenav('d', $cfg['maxrowsperpage']); // page number for cats list
$title = cot_import_request('title', 'TXT');
$sorttype = cot_import_request('sorttype', 'ALP');
$sortway = cot_import_request('sortway', 'ALP');
$filter = cot_import_request('filter', 'ALP');

list($usr['auth_read'], $usr['auth_write'], $usr['isadmin']) = cot_auth('page', 'any');

cot_block($usr['isadmin']);

$parser_list = cot_get_parsers();


$sorttype = empty($sorttype) ? 'id' : $sorttype;
$sort_type = array(
	'id' => $L['Id'],
	'type' => $L['Type'],
	'key' => $L['Key'],
	'title' => $L['Title'],
	'desc' => $L['Description'],
	'text' => $L['Body'],
	'author' => $L['Author'],
	'ownerid' => $L['Owner'],
	'date' => $L['Date'],
	'begin' => $L['Begin'],
	'expire' => $L['Expire'],
	'rating' => $L['Rating'],
	'count' => $L['Hits'],
	'file' => $L['adm_fileyesno'],
	'url' => $L['adm_fileurl'],
	'size' => $L['adm_filesize'],
	'filecount' => $L['adm_filecount']
);
$sqlsorttype = 'page_' . $sorttype;


$sortway = empty($sortway) ? 'desc' : $sortway;
$sort_way = array(
	'asc' => $L['Ascending'],
	'desc' => $L['Descending']
);
$sqlsortway = $sortway;

$filter = empty($filter) ? 'valqueue' : $filter;
$filter_type = array(
	'all' => $L['All'],
	'valqueue' => $L['adm_valqueue'],
	'validated' => $L['adm_validated'],
	'expired' => $L['adm_expired'],
);

$pgch = cot_import('pgch', 'P', 'ARR');
if(count($pgch))
{
	$ractionch = cot_import('ractionch', 'P', 'TXT');
	if($ractionch == 'delete')
	{
		foreach($pgch as $ch)
		{
			cot_page_delete((int)$ch);
		}
	}
	else
	{
		preg_match("#(.+?) = (.+)#", $ractionch, $mch);
		$db->query("UPDATE $db_pages SET page_".$mch[1]." = '".$mch[2]."' WHERE page_id IN (".implode(',', $pgch).")");
	}
}

if ($a == 'delete')
{
	cot_page_delete($id);
	cot_redirect(cot_url('admin', "m=other&p=pagemasseditor&d=$durl&c=$c&in=$in&title=$title&sorttype=$sorttype&sortway=$sortway&filter=$filter", '', true));
}
if ($a == 'update')
{
	$rpage_keywords = cot_import('rpagekeywords', 'P', 'ARR');
	$rpage_alias = cot_import('rpagealias', 'P', 'ARR');
	$rpage_title = cot_import('rpagetitle', 'P', 'ARR');
	$rpage_desc = cot_import('rpagedesc', 'P', 'ARR');
	$rpage_text = cot_import('rpagetext', 'P', 'ARR');
	$rpage_parser = cot_import('rpageparser', 'P', 'ARR');
	$rpage_author = cot_import('rpageauthor', 'P', 'ARR');
	$rpage_file = cot_import('rpagefile', 'P', 'ARR');
	$rpage_url = cot_import('rpageurl', 'P', 'ARR');
	$rpage_size = cot_import('rpagesize', 'P', 'ARR');
	$rpage_cat = cot_import('rpagecat', 'P', 'ARR');
	$rpagedatenow = cot_import('rpagedatenow', 'P', 'ARR');
	$rpage_date = cot_import('rpagedatenow', 'P', 'ARR');
	$rpage_begin = (int)cot_import('rpagebegin', 'P', 'ARR');
	$rpage_expire = (int)cot_import('rpageexpire', 'P', 'ARR');
	$rpublish = cot_import('rpublish', 'P', 'ARR'); // For backwards compatibility
	$rpage_state = cot_import('rpagestate', 'P', 'ARR');
	$rpage_count = cot_import('rpagecount', 'P', 'ARR');
	$rpage_ownerid = cot_import('rpageownerid', 'P', 'ARR');
	$rpage_filecount = cot_import('rpagefilecount', 'P', 'ARR');
	$rpage_state = cot_import('rpagestate', 'P', 'ARR');
	$rpage_delete = cot_import('rpagedelete', 'P', 'ARR');
	
	// Extra fields
	foreach ($cot_extrafields[$db_pages] as $exfld)
	{
		if ($exfld['field_type'] != 'file' || $exfld['field_type'] != 'filesize')
		{
			$rpage_extrafieldsarr[$exfld['field_name']] = cot_import('rpage' . $exfld['field_name'], 'P', 'ARR');
		}
		elseif ($exfld['field_type'] == 'file')
		{
			// TODO FIXME!
			//$rstructureextrafieldsarr[$exfld['field_name']] = cot_import_filesarray('rstructure'.$exfld['field_name']);
		}
	}
	if (is_array($rpage_title))
	{
		foreach ($rpage_title as $id => $titlev)
		{
			$rpagedelete = cot_import($rpage_delete[$id], 'D', 'BOL') ? 1 : 0;
			$sql_page = $db->query("SELECT * FROM $db_pages WHERE page_id=$id LIMIT 1");
			if ($sql_page->rowCount() > 0)
			{

				$row_page = $sql_page->fetch();
				if($rpagedelete)
				{
					$row_page_delete = $row_page;
					if ($row_page['page_state'] == 0)
					{
						$sql_page_delete = $db->query("UPDATE $db_structure SET structure_count=structure_count-1 WHERE structure_code='" . $row_page['page_cat'] . "' ");
					}

					foreach ($cot_extrafields[$db_pages] as $exfld)
					{
						cot_extrafield_unlinkfiles($row_page['page_' . $exfld['field_name']], $exfld);
					}

					$sql_page_delete = $db->delete($db_pages, "page_id=$id");
					cot_log("Deleted page #" . $id, 'adm');
					/* === Hook === */
					foreach (cot_getextplugins('page.edit.delete.done') as $pl)
					{
						include $pl;
					}
					/* ===== */
					if ($cache)
					{
						if ($cfg['cache_page'])
						{
							$cache->page->clear('page/' . str_replace('.', '/', $structure['page'][$row_page['page_cat']]['path']));
						}
						if ($cfg['cache_index'])
						{
							$cache->page->clear('index');
						}
					}
				}
				else
				{
					$rpage = array();
					$sys['parser'] = $row_page['page_parser'];

					$rpage['page_keywords'] = cot_import($rpage_keywords[$id], 'D', 'TXT');
					$rpage['page_alias'] = cot_import($rpage_alias[$id], 'D', 'TXT');
					$rpage['page_title'] = cot_import($rpage_title[$id], 'D', 'TXT');
					$rpage['page_desc'] = cot_import($rpage_desc[$id], 'D', 'TXT');
					$rpage['page_text'] = cot_import($rpage_text[$id], 'D', 'HTM');
					$rpage['page_parser'] = cot_import($rpage_parser[$id], 'D', 'ALP');
					$rpage['page_author'] = cot_import($rpage_author[$id], 'D', 'TXT');
					$rpage['page_file'] = cot_import($rpage_file[$id], 'D', 'INT');
					$rpage['page_url'] = cot_import($rpage_url[$id], 'D', 'TXT');
					$rpage['page_size'] = cot_import($rpage_size[$id], 'D', 'TXT');
					$rpage['page_file'] = ($rpage['page_file'] == 0 && !empty($rpage['page_url'])) ? 1 : $rpage['page_file'];

					$rpage['page_cat'] = cot_import($rpage_cat[$id], 'D', 'TXT');

					$rpagedatenow = cot_import($rpage_datenow[$id], 'D', 'BOL');
					$rpage['page_date'] = $rpagedatenow ? $sys['now'] : (int)cot_import_date($rpage_date[$id]);
					$rpage['page_begin'] = (int)cot_import_date($rpage_begin[$id]);
					$rpage['page_expire'] = (int)cot_import_date($rpage_expire[$id]);
					$rpage['page_expire'] = ($rpage['page_expire'] <= $rpage['page_begin']) ? 0 : $rpage['page_expire'];
					$rpage['page_updated'] = $sys['now'];
					$rpage['page_state'] = cot_import($rpage_state[$id], 'D', 'INT');

					foreach ($cot_extrafields[$db_pages] as $exfld)
					{
						$rpage['page_' . $exfld['field_name']] = cot_import_extrafields($rpage_extrafieldsarr[$exfld['field_name']][$id], $exfld, 'D', $row_page['page_' . $exfld['field_name']]);
					}
					$rpage['page_count'] = cot_import($rpage_count[$id], 'D', 'INT');
					$rpage['page_ownerid'] = cot_import($rpage_ownerid[$id], 'D', 'INT');
					$rpage['page_filecount'] = cot_import($rpage_filecount[$id], 'D', 'INT');

					if (!empty($rpage['page_alias']))
					{
						$sql_page_update = $db->query("SELECT page_id FROM $db_pages WHERE page_alias='" . $db->prep($rpage['page_alias']) . "' AND page_id!=$id");
						$rpage['page_alias'] = ($sql_page_update->rowCount() > 0) ? $rpage['page_alias'] . rand(1000, 9999) : $rpage['page_alias'];
					}

					$sql_page_update = $db->query("SELECT page_cat, page_state FROM $db_pages WHERE page_id=$id");
					$row_page_update = $sql_page_update->fetch();

					if ($row_page_update['page_cat'] != $rpage['page_cat'] && $row_page_update['page_state'] == 0)
					{
						$sql_page_update = $db->query("UPDATE $db_structure SET structure_count=structure_count-1 WHERE structure_code='" . $db->prep($row_page_update['page_cat']) . "' AND structure_area = 'page'");
					}

					if ($rpage['page_state'] != 0 && $row_page_update['page_state'] == 0)
					{
						$db->query("UPDATE $db_structure SET structure_count=structure_count-1 WHERE structure_code='" . $db->prep($rpage['page_cat']) . "' ");
					}
					$sql_page_update = $db->update($db_pages, $rpage, 'page_id=?', array($id));
					cot_extrafield_movefiles();

					if ($rpage['page_state'] == 0 && $cache)
					{
						if ($cfg['cache_page'])
						{
							$cache->page->clear('page/' . str_replace('.', '/', $structure['page'][$rpage['page_cat']]['path']));
						}
						if ($cfg['cache_index'])
						{
							$cache->page->clear('index');
						}
					}

					cot_log("Edited page #" . $id, 'adm');
				}
			}
		}
	}
	cot_redirect(cot_url('admin', "m=other&p=pagemasseditor&d=$durl&c=$c&in=$in&title=$title&sorttype=$sorttype&sortway=$sortway&filter=$filter", '', true));
}
if ($in)
{

	$catlist2 = cot_structure_children('page', $c);
	$where['cat'] = "page_cat IN ('" . implode("','", $catlist2) . "')";
}
else
{
	$where['cat'] = "page_cat='" . $db->prep($c) . "'";
}
if (!empty($title))
{
	$where['title'] = "page_title LIKE '%" . $db->prep($title) . "%'";
}

if ($filter == 'valqueue')
{
	$where['state'] = "page_state=1 ";
}
elseif ($filter == 'validated')
{
	$where['state'] = "page_state<>1 ";
}
elseif ($filter == 'expired')
{
	$where['state'] = "page_begin > {$sys['now']} OR (page_expire <> 0 AND page_expire < {$sys['now']})";
}
$where = ($where) ? 'WHERE ' . implode(' AND ', $where) : '';
$totallines = $db->query("SELECT COUNT(*) FROM $db_pages $where")->fetchColumn();

$sqllist = $db->query("SELECT * FROM $db_pages $where ORDER BY $sqlsorttype $sqlsortway LIMIT $d, " . $cfg['maxrowsperpage']);

$t = new XTemplate(cot_tplfile('pagemasseditor.tools', 'plug'));
$pagenav = cot_pagenav('admin', "m=other&p=pagemasseditor&c=$c&in=$in&title=$title&sorttype=$sorttype&sortway=$sortway&filter=$filter", $d, $totallines, $cfg['maxrowsperpage']);

$sqllist_rowset = $sqllist->fetchAll();
foreach ($sqllist_rowset as $pag)
{
	$pag['page_status'] = cot_page_status($pag['page_state'], $pag['page_begin'], $pag['page_expire']);
	$sys['parser'] = $pag['page_parser'];
	$id = $pag['page_id'];

	$t->assign(cot_generate_pagetags($pag, 'PAGEEDIT_', 0, $usr['isadmin']));
	$t->assign(array(
		'PAGEEDIT_PAGETITLE' => $L['page_edittitle'],
		'PAGEEDIT_SUBTITLE' => $L['page_editsubtitle'],
		'PAGEEDIT_FORM_ID' => $pag['page_id'],
		'PAGEEDIT_FORM_STATE' => $pag['page_state'],
		'PAGEEDIT_FORM_EDITSTATE' => cot_selectbox($pag['page_state'], 'rpagestate[' . $id . ']', array(0, 1, 2), array($L['page_status_approved'], $L['page_status_pending'], $L['page_status_draft']), false),
		'PAGEEDIT_FORM_DELETE' => cot_checkbox(0, 'rpagedelete[' . $id . ']', $L['Delete']),
		'PAGEEDIT_FORM_STATUS' => $pag['page_status'],
		'PAGEEDIT_FORM_LOCALSTATUS' => $L['page_status_' . $pag['page_status']],
		'PAGEEDIT_FORM_CAT' => cot_selectbox_structure('page', $pag['page_cat'], 'rpagecat[' . $id . ']'),
		'PAGEEDIT_FORM_CAT_SHORT' => cot_selectbox_structure('page', $pag['page_cat'], 'rpagecat[' . $id . ']', $c),
		'PAGEEDIT_FORM_KEYWORDS' => cot_inputbox('text', 'rpagekeywords[' . $id . ']', $pag['page_keywords'], array('size' => '32', 'maxlength' => '255')),
		'PAGEEDIT_FORM_ALIAS' => cot_inputbox('text', 'rpagealias[' . $id . ']', $pag['page_alias'], array('size' => '32', 'maxlength' => '255')),
		'PAGEEDIT_FORM_TITLE' => cot_inputbox('text', 'rpagetitle[' . $id . ']', $pag['page_title'], array('size' => '64', 'maxlength' => '255')),
		'PAGEEDIT_FORM_DESC' => cot_inputbox('text', 'rpagedesc[' . $id . ']', $pag['page_desc'], array('size' => '64', 'maxlength' => '255')),
		'PAGEEDIT_FORM_AUTHOR' => cot_inputbox('text', 'rpageauthor[' . $id . ']', $pag['page_author'], array('size' => '24', 'maxlength' => '100')),
		'PAGEEDIT_FORM_DATE' => cot_selectbox_date($pag['page_date'], 'long', 'rpagedate[' . $id . ']') . ' ' . $usr['timetext'],
		'PAGEEDIT_FORM_DATENOW' => cot_checkbox(0, 'rpagedatenow[' . $id . ']'),
		'PAGEEDIT_FORM_BEGIN' => cot_selectbox_date($pag['page_begin'], 'long', 'rpagebegin[' . $id . ']') . ' ' . $usr['timetext'],
		'PAGEEDIT_FORM_EXPIRE' => cot_selectbox_date($pag['page_expire'], 'long', 'rpageexpire[' . $id . ']') . ' ' . $usr['timetext'],
		'PAGEEDIT_FORM_UPDATED' => cot_date('datetime_full', $pag['page_updated']) . ' ' . $usr['timetext'],
		'PAGEEDIT_FORM_FILE' => cot_selectbox($pag['page_file'], 'rpagefile[' . $id . ']', range(0, 2), array($L['No'], $L['Yes'], $L['Members_only']), false),
		'PAGEEDIT_FORM_URL' => cot_inputbox('text', 'rpageurl[' . $id . ']', $pag['page_url'], array('size' => '56', 'maxlength' => '255')),
		'PAGEEDIT_FORM_SIZE' => cot_inputbox('text', 'rpagesize[' . $id . ']', $pag['page_size'], array('size' => '56', 'maxlength' => '255')),
		'PAGEEDIT_FORM_TEXT' => cot_textarea('rpagetext[' . $id . ']', $pag['page_text'], 24, 120, '', 'input_textarea_editor'),
		'PAGEEDIT_FORM_TEXT_LITE' => cot_textarea('rpagetext[' . $id . ']', $pag['page_text'], 24, 120, ''),
		'PAGEEDIT_FORM_DELETE_HREF' => cot_url('admin', "m=other&p=pagemasseditor&a=update&d=$durl&c=$c&in=$in&title=$title&sorttype=$sorttype&sortway=$sortway&filter=$filter&a=delete&id=" . $id),
		'PAGEEDIT_FORM_OPEN_HREF' => cot_url('page', 'c=' . $pag['page_cat'] . '&id=' . $id),
		'PAGEEDIT_FORM_EDIT_HREF' => cot_url('page', "m=edit&id=" . $pag['page_id']),
		'PAGEEDIT_FORM_PARSER' => cot_selectbox($pag['page_parser'], 'rpageparser[' . $id . ']', cot_get_parsers(), cot_get_parsers(), false),
		'PAGEEDIT_FORM_OWNERID' => cot_inputbox('text', 'rpageownerid[' . $id . ']', $pag['page_ownerid'], array('size' => '24', 'maxlength' => '24')),
		'PAGEEDIT_FORM_PAGECOUNT' => cot_inputbox('text', 'rpagecount[' . $id . ']', $pag['page_count'], array('size' => '8', 'maxlength' => '8')),
		'PAGEEDIT_FORM_FILECOUNT' => cot_inputbox('text', 'rpagefilecount[' . $id . ']', $pag['page_filecount'], array('size' => '8', 'maxlength' => '8'))
	));

// Extra fields
	foreach ($cot_extrafields[$db_pages] as $exfld)
	{
		$uname = strtoupper($exfld['field_name']);
		$exfld_val = cot_build_extrafields('rpage' . $exfld['field_name'] . '[' . $id . ']', $exfld, $pag['page_' . $exfld['field_name']]);
		$exfld_title = isset($L['page_' . $exfld['field_name'] . '_title']) ? $L['page_' . $exfld['field_name'] . '_title'] : $exfld['field_description'];

		$t->assign(array(
			'PAGEEDIT_FORM_' . $uname => $exfld_val,
			'PAGEEDIT_FORM_' . $uname . '_TITLE' => $exfld_title,
			'PAGEEDIT_FORM_EXTRAFLD' => $exfld_val,
			'PAGEEDIT_FORM_EXTRAFLD_TITLE' => $exfld_title
		));
		$t->parse('MAIN.ROW.EXTRAFLD');
	}
	$t->parse('MAIN.ROW');
}
$hiddens = '';
unset($_GET['a']);
unset($_GET['d']);
foreach ($_GET as $get_k => $get_v)
{
	$hiddens .= cot_inputbox('hidden', $get_k, $get_v);
}
$t->assign(array(
	'PAGEEDIT_FORM_SEND' => cot_url('admin', "m=other&p=pagemasseditor&a=update&d=$durl&c=$c&in=$in&title=$title&sorttype=$sorttype&sortway=$sortway&filter=$filter"),
	'PAGEEDIT_FORMFILRER_ACTION' => cot_url('admin'),
	'PAGEEDIT_FORMFILRER_HIDDEN' => cot_inputbox('hidden', 'm', 'other') . cot_inputbox('hidden', 'p', 'pagemasseditor'),
	'PAGEEDIT_FORMFILRER_CAT' => cot_selectbox_structure('page', $c, 'c', '', false),
	'PAGEEDIT_FORMFILRER_IN' => cot_checkbox($in, 'in'),
	'PAGEEDIT_FORMFILRER_TITLE' => cot_inputbox('text', 'title', $title),
	'PAGEEDIT_FORMFILRER_ORDER' => cot_selectbox($sorttype, 'sorttype', array_keys($sort_type), array_values($sort_type), false),
	'PAGEEDIT_FORMFILRER_WAY' => cot_selectbox($sortway, 'sortway', array_keys($sort_way), array_values($sort_way), false),
	'PAGEEDIT_FORMFILRER_FILTER' => cot_selectbox($filter, 'filter', array_keys($filter_type), array_values($filter_type), false),
	'PAGEEDIT_FORMFILRER_TOTALDBPAGES' => $totallines,
	'PAGEEDIT_PAGEPREV' => $pagenav['prev'],
	'PAGEEDIT_PAGENEXT' => $pagenav['next'],
	'PAGEEDIT_PAGNAV' => $pagenav['main']
));

// Error and message handling
cot_display_messages($t);

$t->parse('MAIN');
$plugin_body .= $t->text('MAIN');
?>